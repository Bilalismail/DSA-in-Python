Certainly! Here's a question that tests both understanding and application of hashtables:

---

**Problem: Subarray Sum Equals K**

Given an array of integers `nums` and an integer `k`, write a function to determine if the array has a continuous subarray of any size that sums up to exactly `k`.

**Input:**
- `nums`: List[int] - an array of integers. (1 ≤ nums.length ≤ 2*10^4)
- `k`: int - the target sum.

**Output:**
- bool - `True` if there's a continuous subarray that sums up to `k`, otherwise `False`.

**Examples:**

```python
subarraySum([1,2,3,2,5], 5)
```
Output: `True` (because 2 + 3 = 5)

```python
subarraySum([1,2,3,4,5], 11)
```
Output: `False` (No subarray sums up to 11)

**Note:**

You may assume that both the number of elements in the list and the size of the individual elements will not exceed 10,000.

---

**Hint**: 
Think about how to optimize it using a hashtable. If the cumulative sum (from start to current index) has been seen before, it indicates that a subarray between the last index where the same sum was seen and the current index sums up to `k`.

